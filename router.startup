#!/bin/bash

# Configuration des interfaces réseau
ifconfig eth0 192.168.0.1 netmask 255.255.255.0 up  # Interface LAN (vers les clients)
ifconfig eth1 up                                   # Interface externe pour Internet

# Réinitialiser les règles iptables
iptables -F
iptables -t nat -F
iptables -X

iptables -P INPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -P OUTPUT ACCEPT

# Mettre en place le NAT pour l'accès à Internet via eth1
iptables -t nat -A POSTROUTING -o eth1 -j MASQUERADE

# Exclure client3 (192.168.0.4) des redirections HTTP et HTTPS
#iptables -t nat -A PREROUTING -p tcp --dport 80 -s 192.168.0.4 -j RETURN
#iptables -t nat -A PREROUTING -p tcp --dport 443 -s 192.168.0.4 -j RETURN

# Rediriger le trafic HTTP et HTTPS pour les autres clients vers Squid
iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 9999
iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-port 9999

# Ajouter le DNS pour la résolution de noms
echo "nameserver 8.8.8.8" > /etc/resolv.conf

# Log pour confirmation
echo "Configuration complète du routeur avec NAT et redirection Squid."

#installer les dependances
echo "Mise à jour des packages..."
apt-get update || { echo "apt-get update failed"; exit 1; }

echo "Installation des paquets nécessaires..."
apt-get install -y python3-pip squid apache2 iproute2|| { echo "Installation failed"; exit 1; }

# Vérifier et installer pip3 packages
if ! command -v pip3 &> /dev/null; then
  echo "pip3 non trouvé, installation en cours..."
  apt-get install -y python3-pip || { echo "pip3 install failed"; exit 1; }
fi

echo "Installation des paquets Python..."
pip3 install requests beautifulsoup4 pymongo || { echo "Pip install failed"; exit 1; }
# apt-get update

echo "Dépendances installées."

# -----------------------------------------------------
#           Limit Bandwidth to 100 Mbps               |
# -----------------------------------------------------

# Set the default qdisc to HTB for bandwidth control
tc qdisc add dev eth1 root handle 1: htb default 30

# Create a class that limits bandwidth to 100 Mbps
tc class add dev eth1 parent 1: classid 1:1 htb rate 100mbit

# Apply the rate limit of 100 Mbps for HTTP/HTTPS traffic
tc filter add dev eth1 parent 1: protocol ip prio 1 u32 match ip dport 80 0xffff flowid 1:1
tc filter add dev eth1 parent 1: protocol ip prio 1 u32 match ip dport 443 0xffff flowid 1:1


# -----------------------------------------------------
#  Set Up Delay for authorized websites (Below 10ms)  |
# -----------------------------------------------------

# Add a delay of 10 ms to all outgoing traffic
tc qdisc add dev eth1 parent 1:1 handle 10: netem delay 10ms
